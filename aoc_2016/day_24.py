import itertools

input

yMax = len(input)
xMax = len(input[0])
INFINITY = 99999

maze = [ list(x) for x in input ]

start = None

mazeNodes = []

for y in range(yMax):
    for x in range(xMax):
        c = maze[y][x]
        if c.isdigit():
            mazeNode = int(c)
            if mazeNode >= len(mazeNodes):
                mazeNodes.extend([] for i in range(len(mazeNodes), mazeNode+1))
            mazeNodes[mazeNode] = [ (x, y), None ]

for node in mazeNodes:
    node[1] = [ INFINITY for i in mazeNodes ]
    workMaze = [ x.copy() for x in maze ]
    workMaze[node[0][1]][node[0][0]] = "v"

    pathList = [ node[0] ]

    steps = 0

    while len(pathList)>0:
        newPathList = []
        steps += 1
        for testLoc in pathList:
                for d in [ (-1,0), (0,1), (1,0), (0,-1) ]:
                    ( x, y ) = ( testLoc[0] + d[0], testLoc[1] + d[1] )
                    if workMaze[y][x] == ".":
                        newPathList.append(( x, y ))
                        workMaze[y][x] = "v"                        
                    elif workMaze[y][x].isdigit():
                        nodeNum = int(workMaze[y][x])
                        node[1][nodeNum] = steps
                        newPathList.append(( x, y ))
                        workMaze[y][x] = "v"
        pathList = newPathList

maxDistance = INFINITY
bestPath = None

for pathTest in itertools.permutations(range(1, len(mazeNodes))):
    print(pathTest)
    curNode = mazeNodes[0]
    d = 0
    for n in pathTest:
        d += curNode[1][n]
        curNode = mazeNodes[n]
    d += curNode[1][0]
    if d<maxDistance:
        maxDistance = d
        bestPath = pathTest

print(maxDistance, bestPath)